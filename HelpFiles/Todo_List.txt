Step 1 - Add background.png to this Container as a background image.
Step 2 - Create a new class called Story.
Step 3 - Create 3 properties for this class, A. storyTitle to store the story text. B. choice1 to store the text for choice 1, C. choice2 to store the text for choice 2.
Step 4 - Create a Constructor for this class to be able to initialise the properties created in step 3.
Step 5 - Create a new class called StoryBrain.
Step 6 - Uncomment the lines below to include storyData as a private property in StoryBrain.
Step 7 - Create a method called getStory() that returns the first storyTitle from _storyData.
Step 8 - Create a new storyBrain object from the StoryBrain class.
Step 9 - use the storyBrain to get the first story title and display it in this Text Widget.
Step 10 - Create a method called getChoice1() that returns the text for the first choice1 from _storyData.
Step 11 - Create a method called getChoice2() that returns the text for the first choice2 from _storyData.
Step 12 - Use the storyBrain to get the text for choice 1.
Step 13 - Use the storyBrain to get the text for choice 2.
Step 14 - Run the app and see if you can see the screen update with the first story.
Step 15 - Create a property called storyNumber which starts with a value of 0. This will be used to track which story the user is currently viewing.
Step 16 - Create a method called nextStory(), it should not have any outputs but it should have 1 input called choiceNumber which will be the choice number (int) made by the user.
Step 17 - Call the nextStory() method from storyBrain and pass the number 1 as the choice made by the user.
Step 18 - Call the nextStory() method from storyBrain and pass the number 2 as the choice made by the user.
Step 19 - duplicate Step 18
Step 20 - Download the story plan here: https://drive.google.com/uc?export=download&id=1KU6EghkO9Hf2hRM0756xFHgNaZyGCou3
Step 21 - Using the story plan, update nextStory() to change the storyNumber depending on the choice made by the user. e.g. if choiceNumber was equal to 1 and the storyNumber is 0, the storyNumber should become 2.
Step 22 - In nextStory() if the storyNumber is equal to 3 or 4 or 5, that means it's the end of the game and it should call a method called restart() that resets the storyNumber to 0.
Step 23 - Use the storyNumber property inside getStory(), getChoice1() and getChoice2() so that it gets the updated story and choices rather than always just the first (0th) one.
Step 24 - Run the app and try to figure out what code you need to add to this file to make the story change when you press on the choice buttons - needs setState()
Step 25 - Change the storyNumber property into a private property so that only story_brain.dart has access to it. You can do this by right clicking on the name (storyNumber) and selecting Refactor -> Rename to make the change across all the places where it's used.
Step 26 - Use a Flutter Visibility Widget to wrap this FlatButton.
Step 27 - Create a method called buttonShouldBeVisible() which checks to see if storyNumber is 0 or 1 or 2 (when both buttons should show choices) and return true if that is the case, else it should return false.
Step 28 - Set the "visible" property of the Visibility Widget to equal the output from the buttonShouldBeVisible() method in the storyBrain
